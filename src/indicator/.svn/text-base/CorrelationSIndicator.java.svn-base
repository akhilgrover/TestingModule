package indicator;

import Share.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import ma.MA;

public class CorrelationSIndicator extends AbstractIndicator {

    public void init() {
        this.params = new HashMap(1);
        params.put(1, 85);   //period
        this.name = "Correlation";
        this.paramCount = 1;
    }

    public void init(HashMap param) {
        this.params = param;
        this.name = "Correlation";
        this.paramCount = 1;
    }
    /**
     * Method buildIndicator
     *
     *
     * @return: Indicator result
     *
     */
    public IndicatorList buildIndicator(ShareList sl1, ShareList sl2) {
        int variance = (Integer) params.get(1);
        double corr_value = 0.0;
        IndicatorList idl = new IndicatorList(sl1.getSize());
        IndicatorField idf = null;
        ArrayList<ShareData> al1 = new ArrayList<ShareData>();
        ArrayList<ShareData> al2 = new ArrayList<ShareData>();

        int shlEndIdx = sl1.getSize() - 1;  //e.g. size 3522 [so i=0 to 3521] hence shlEndIdx=3522-2=3520 to avoid today's date
        for (int k = 0; k <= shlEndIdx; k++) {
            ShareData sd1 = sl1.getSharedata(k);
            if(sl2.isDatePresent(sd1.getDate())==-1)
                continue;
            ShareData sd2 = sl2.getSharedata(sl2.isDatePresent(sd1.getDate()));
            //debug.sopWC("k = " + k + " = " + G.myformat.format(sd1.getDate()));
            if (al1.size() < (variance)) {
                al1.add(sd1);
                al2.add(sd2);
            } else {
                if (al1.size() > (variance)) {
                    al1.remove(0);
                    if(al2.size()>variance)
                        al2.remove(0);
                }
                al1.add(sd1);
                al2.add(sd2);
                double sumX =0 , sumY =0, sumXY=0 , sumX2 =0, sumY2 = 0;
                for (int i = 1; i <= variance; i++) {
                    double d1=al1.get(i).getClosePrice();
                    double d2=al1.get(i-1).getClosePrice();
                    double c1=al2.get(i).getClosePrice();
                    double c2=al2.get(i-1).getClosePrice();
                    sumX += (d1/d2)-1;
                    sumY += (c1/c2)-1;
                    sumXY += ((d1/d2)-1) * ((c1/c2)-1);
                    sumX2 += Math.pow(((d1/d2)-1),2);
                    sumY2 += Math.pow(((c1/c2)-1),2);
                    //debug.sopWC("******   " + al1.get(j).toString()+ "   " + G.myformat.format(sd1.getDate()) + "   " + s1close[j]);
                    //debug.sopWC("\t   " + al2.get(j).toString()+ "   " + G.myformat.format(sd2.getDate()) + "   " + s2close[j]);
                }
                corr_value = ((variance * sumXY) - (sumX * sumY)) / Math.sqrt((variance*sumX2-Math.pow(sumX,2))*(variance*sumY2-Math.pow(sumY,2)));
                //corr_value = pcor.correlation(s1close, s2close);
                if (Double.isNaN(corr_value)) {
                    corr_value = 0.00;
                }
                //System.out.println(liveftsepriceview sd1.getDate()+","+corr_value);
                idf = new IndicatorField(sd1.getDate(), corr_value, 0);
                idl.addIndField(idf);
            }
        }
        idf = null;
        return idl;

//	var data = share.getCloseArray();
//	var data2 = relShareList[relShare].getCloseArray();
//	var data = share.getCloseArray(period+1);
//	var data2 = relShareList[relShare].getCloseArray(period+1);
//	var sumX = sumY = sumXY = sumX2 = sumY2 = 0;
//	for (var i=1;i<data.length;i++)
//	{
//		sumX += data[i]/data[i-1]-1;
//		sumY += data2[i]/data2[i-1]-1;
//		sumXY += (data[i]/data[i-1]-1) * (data2[i]/data2[i-1]-1);
//		sumX2 += Math.pow((data[i]/data[i-1]-1),2);
//		sumY2 += Math.pow((data2[i]/data2[i-1]-1),2);
//	}
//	var corr = (period * sumXY - sumX * sumY) / Math.sqrt((period*sumX2-Math.pow(sumX,2))*(period*sumY2-Math.pow(sumY,2)));
//		return corr;
//        return beta;
    }

    @Override
    public String toString() {
        int param1 = (Integer) params.get(1);
        int param2 = (Integer) params.get(2);
        StringBuilder buffer = new StringBuilder();
        //buffer.append(name);
        //buffer.append(" ");
        buffer.append(param1);
        buffer.append("d ");
        buffer.append(param2);
        buffer.append("dSig Indicator1 ");

        return buffer.toString();
    }

    @Override
    public IndicatorList buildIndicator(ShareList sl) {
        throw new UnsupportedOperationException("Not supported For Beta.");
    }
}